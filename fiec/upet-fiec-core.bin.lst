
upet-fiec-core.a65


    2 A:1000                                    ; from https:

    4 A:1000                                    ; changes between the C128/C64 and the uPET:
    5 A:1000                                    ; - VIA instead of CIA, but pinout on ATN, CLK, DATA same
    6 A:1000                                    ; - Use port bit 0 for fast serial direction
    7 A:1000                                    ; - The C64 has input bits directly at CIA; uPET has inverters

   10 A:1000                                    ; *=$4000

   12 A:1000                                    ; -------------------------------------------------
   13 A:1000                                    ; IO

   15 A:1000  4c 04 12                           jmp SECLISTEN                ; fiec_secnd   ; 0
   16 A:1003  4c 13 12                           jmp SECTALK                ; fiec_tksa    ; 1
   17 A:1006  4c 64 11                           jmp IECIN                ; fiec_acptr   ; 2
   18 A:1009  4c 37 12                           jmp IECOUT                ; fiec_ciout   ; 3
   19 A:100c  4c 4c 12                           jmp UNTALK                ; fiec_untlk   ; 4
   20 A:100f  4c 5d 12                           jmp UNLISTEN                ; fiec_unlsn   ; 5
   21 A:1012  4c 59 10                           jmp LISTEN                ; fiec_listn   ; 6
   22 A:1015  4c 56 10                           jmp TALK                ; fiec_talk    ; 7

   24 A:1018                                    ; init/meta
   25 A:1018  4c 21 10                           jmp fiec_init                ; 8   ; 15

   27 A:101b                                    VIA=$e850

   29 A:101b                                    T2VAL=4

   31 A:101b                                    VIA_PB=0
   32 A:101b                                    VIA_DDRB=2
   33 A:101b                                    VIA_T2L=8
   34 A:101b                                    VIA_T2H=9
   35 A:101b                                    VIA_SR=10
   36 A:101b                                    VIA_ACR=11
   37 A:101b                                    VIA_PCR=12
   38 A:101b                                    VIA_IFR=13
   39 A:101b                                    VIA_IER=14

   41 A:101b                                    VIA_IRQ_SR=%00000100

   43 A:101b                                    P_DATA=$80
   44 A:101b                                    P_CLK=$40
   45 A:101b                                    P_DOUT=$20
   46 A:101b                                    P_COUT=$10
   47 A:101b                                    P_AOUT=$08
   48 A:101b                                    P_FSDIR=$01

   50 A:101b                                    ; -------------------------------------------------
   51 A:101b                                    ; Memory locations

   64 A:101b  00                       EOIFL     .byt 0
   65 A:101c  00                       RXBYT     .byt 0
   66 A:101d  00                       BITCNT    .byt 0
   67 A:101e  00                       BUFFLG    .byt 0
   68 A:101f  00                       BYTE      .byt 0
   69 A:1020  00                       BURST_FLG .byt 0

   72 A:1021                                    STATUS=$96

   77 A:1021                                    ; -------------------------------------------------
   78 A:1021                                    ; Constants

   80 A:1021                                    IEC_TALK=$40
   81 A:1021                                    IEC_LISTEN=$20
   82 A:1021                                    IEC_UNTALK=$5f
   83 A:1021                                    IEC_UNLISTN=$3f

   85 A:1021                                    ; -------------------------------------------------

   87 A:1021                           fiec_init 
   87 A:1021                                    ; TODO
   88 A:1021  a9 7f                              lda #$7f
   89 A:1023  8d 5e e8                           sta VIA+VIA_IER
   90 A:1026  8d 5d e8                           sta VIA+VIA_IFR
   91 A:1029  a9 39                              lda #%00111001
   92 A:102b  8d 52 e8                           sta VIA+VIA_DDRB
   93 A:102e  a9 01                              lda #%00000001
   94 A:1030  8d 50 e8                           sta VIA+VIA_PB
   95 A:1033  20 b8 12                           jsr fastoff
   96 A:1036  a9 00                              lda #$00
   97 A:1038  8d 20 10                           sta BURST_FLG
   98 A:103b  a9 00                              lda #0
   99 A:103d  8d 1e 10                           sta BUFFLG
  100 A:1040  85 96                              sta STATUS
  101 A:1042  8d 1b 10                           sta EOIFL
  102 A:1045                                    ;LDA #$00
  103 A:1045  8d 5b e8                           sta VIA+VIA_ACR
  104 A:1048  8d 5c e8                           sta VIA+VIA_PCR
  105 A:104b  a9 04                              lda #<T2VAL
  106 A:104d  8d 58 e8                           sta VIA+VIA_T2L            ; set timer for SR
  107 A:1050  a9 00                              lda #>T2VAL
  108 A:1052  8d 59 e8                           sta VIA+VIA_T2H
  109 A:1055  60                                 rts 

  111 A:1056                                    ; -------------------------------------------------
  112 A:1056                                    ; -talk-

  114 A:1056                           TALK      
  114 A:1056                                    
  115 A:1056  09 40                              ora #IEC_TALK
  116 A:1058  2c                                 .byt $2c

  118 A:1059                                    ; -listen-

  120 A:1059                           LISTEN    
  120 A:1059                                    
  121 A:1059  09 20                              ora #IEC_LISTEN

  123 A:105b                                    ; ignore
  124 A:105b                                    ;JSR ILRS232 ; Interlock RS-232/Serial

  126 A:105b                           sendatn   
  126 A:105b                                    
  127 A:105b  48                                 pha                    ; save byte

  129 A:105c  a9 00                              lda #0
  130 A:105e  85 96                              sta STATUS                ; clear status

  132 A:1060  2c 1e 10                           bit BUFFLG                ; byte in out buffer?
  133 A:1063  10 0d                              bpl nobuf                ; no, directly to out-with-atn

  135 A:1065  38                                 sec 
  136 A:1066  6e 1b 10                           ror EOIFL                ; set EOI
  137 A:1069  20 ad 10                           jsr bytout                ; Send Data On Serial Bus
  138 A:106c  4e 1e 10                           lsr BUFFLG                ; clear buffer flag
  139 A:106f  4e 1b 10                           lsr EOIFL                ; clear EOI
  140 A:1072                           nobuf     
  140 A:1072                                    
  141 A:1072  68                                 pla                    ; restore byte
  142 A:1073  8d 1f 10                           sta BYTE                ; byte to send

  144 A:1076  20 aa 12                           jsr stabilize                ; Stabilize Timing

  146 A:1079  20 8e 12                           jsr datahi                ; Set Data High
  147 A:107c  ad 50 e8                           lda VIA+VIA_PB
  148 A:107f  29 08                              and #P_AOUT               ; is ATN already set?
  149 A:1081  d0 12                              bne atnison                ; yes, skip

  151 A:1083  20 c6 12                           jsr faston                ; Fast Disk On (set SR to output)

  153 A:1086  a9 ff                              lda #$ff
  154 A:1088  8d 5a e8                           sta VIA+VIA_SR            ; send $ff, i.e. DATA stays high, FCLK (SRQ) toggles

  156 A:108b  20 ae 12                           jsr prep4res                ; Prepare For Response, includes Fast serial off?

  158 A:108e  8a                                 txa                    ; wait loop
  159 A:108f  a2 14                              ldx #$14             ; 143 cycles total (inc. TXA/TAX)
  160 A:1091                           atnl      
  160 A:1091                                    
  161 A:1091  ca                                 dex 
  162 A:1092  d0 fd                              bne atnl
  163 A:1094  aa                                 tax 

  165 A:1095                                    ; skip here if ATN is already set
  166 A:1095                           atnison   
  166 A:1095                                    
  167 A:1095  ad 50 e8                           lda VIA+VIA_PB
  168 A:1098  09 08                              ora #P_AOUT               ; set ATN active
  169 A:109a  8d 50 e8                           sta VIA+VIA_PB

  171 A:109d                                    ; entry point to send SECLISTEN

  173 A:109d                           doseclisten 
  173 A:109d                                    
  174 A:109d  20 aa 12                           jsr stabilize                ; Stabilize Timing
  175 A:10a0  20 85 12                           jsr clklo                ; Set Clock Low
  176 A:10a3  20 8e 12                           jsr datahi                ; Set Data High

  178 A:10a6  8a                                 txa                    ; wait loop
  179 A:10a7  a2 b8                              ldx #$b8             ; 1291 cycles total (incl. TXA/TAX)
  180 A:10a9                           delay     
  180 A:10a9                                    
  181 A:10a9  ca                                 dex 
  182 A:10aa  d0 fd                              bne delay
  183 A:10ac  aa                                 tax 

  185 A:10ad                                    ; Send Data On Serial Bus

  187 A:10ad                           bytout    
  187 A:10ad                                    
  188 A:10ad  20 aa 12                           jsr stabilize                ; Stabilize Timing
  189 A:10b0  20 8e 12                           jsr datahi                ; Set Data High
  190 A:10b3  20 a0 12                           jsr readiec                ; Read Serial Lines
  191 A:10b6  b0 03                              bcs devpres                ; check if data is high
  192 A:10b8  4c 4e 11                           jmp devnotpres                ; if so, no device present
  193 A:10bb                           devpres   
  193 A:10bb                                    
  194 A:10bb                                    ;lda #VIA_IRQ_SR
  195 A:10bb                                    ;sta VIA+VIA_IFR
  196 A:10bb  ad 5a e8                           lda VIA+VIA_SR            ; clear interrupts

  198 A:10be  20 7c 12                           jsr clkhi                ; Set Clock High
  199 A:10c1  2c 1b 10                           bit EOIFL                ; shall we send EOI?
  200 A:10c4  10 0a                              bpl notxeoi                ; no, skip waiting for EOI acknowledge

  202 A:10c6                           wdatahi   
  202 A:10c6                                    
  203 A:10c6  20 a0 12                           jsr readiec                ; Read Serial Lines
  204 A:10c9  b0 fb                              bcs wdatahi                ; wait for DATA high

  206 A:10cb                           wdatalo   
  206 A:10cb                                    
  207 A:10cb  20 a0 12                           jsr readiec                ; Read Serial Lines
  208 A:10ce  90 fb                              bcc wdatalo                ; wait for DATA low

  210 A:10d0                           notxeoi   
  210 A:10d0                                    ; loop waiting for DATA going hi, or rx'ing a fast marker byte
  211 A:10d0  ad 50 e8                           lda VIA+VIA_PB
  212 A:10d3  cd 50 e8                           cmp VIA+VIA_PB
  213 A:10d6  d0 f8                              bne notxeoi                ; debounce serial lines
  214 A:10d8  48                                 pha 
  215 A:10d9  ad 5d e8                           lda VIA+VIA_IFR
  216 A:10dc  29 04                              and #VIA_IRQ_SR               ; check if SR has received a byte
  217 A:10de  f0 05                              beq slowdrv                ; no, then skip

  219 A:10e0  a9 c0                              lda #$c0             ; set flag that drive is FAST
  220 A:10e2  8d 20 10                           sta BURST_FLG                ; Fast Serial Internal/External Flag

  222 A:10e5                           slowdrv   
  222 A:10e5                                    
  223 A:10e5  68                                 pla 
  224 A:10e6  30 e8                              bmi notxeoi                ; wait for DATA high (note: we did not do an ASL)

  226 A:10e8  09 10                              ora #P_COUT               ; When device has set CLK high, set CLK low ourself
  227 A:10ea  8d 50 e8                           sta VIA+VIA_PB
  228 A:10ed  29 08                              and #P_AOUT               ; is ATN output active?
  229 A:10ef  d0 14                              bne txslow                ; yes, then skip

  231 A:10f1  2c 20 10                           bit BURST_FLG                ; Fast Serial Internal/External Flag
  232 A:10f4  10 0f                              bpl txslow                ; not fast, then skip

  234 A:10f6  20 c6 12                           jsr faston                ; Fast Disk On
  235 A:10f9  ad 1f 10                           lda BYTE
  236 A:10fc  8d 5a e8                           sta VIA+VIA_SR            ; send byte via SR
  237 A:10ff  20 ae 12                           jsr prep4res                ; Prepare For Response
  238 A:1102  4c 38 11                           jmp endtx                ; finish sending via SR

  240 A:1105                                    ; send slow byte
  241 A:1105                           txslow    
  241 A:1105                                    
  242 A:1105  a9 08                              lda #$08
  243 A:1107  8d 1d 10                           sta BITCNT

  245 A:110a                                     .assert P_DATA=$80,"Bit check mismatch"

  247 A:110a                           txsl1     
  247 A:110a                                    
  248 A:110a  ad 50 e8                           lda VIA+VIA_PB
  249 A:110d  cd 50 e8                           cmp VIA+VIA_PB
  250 A:1110  d0 f8                              bne txsl1                ; debounce
  251 A:1112  0a                                 asl 
  252 A:1113  b0 36                              bcs timeout                ; if DATA is low, return send timeout

  254 A:1115  6e 1f 10                           ror BYTE                ; set DATA out to bit
  255 A:1118  b0 05                              bcs hiout
  256 A:111a  20 97 12                           jsr datalo                ; Set Data Low
  257 A:111d  d0 03                              bne clkout

  259 A:111f                           hiout     
  259 A:111f                                    
  260 A:111f  20 8e 12                           jsr datahi                ; Set Data High

  262 A:1122                           clkout    
  262 A:1122                                    
  263 A:1122  20 7c 12                           jsr clkhi                ; Set Clock High
  264 A:1125  ea                                 nop 
  265 A:1126  ea                                 nop 
  266 A:1127  ea                                 nop 
  267 A:1128  ea                                 nop 
  268 A:1129  ad 50 e8                           lda VIA+VIA_PB
  269 A:112c  29 df                              and #255-P_DOUT         ; DATA high again
  270 A:112e  09 10                              ora #P_COUT               ; CLK low again
  271 A:1130  8d 50 e8                           sta VIA+VIA_PB
  272 A:1133  ce 1d 10                           dec BITCNT                ; next bit
  273 A:1136  d0 d2                              bne txsl1

  275 A:1138                                    ; finish sending via SR

  277 A:1138                           endtx     
  277 A:1138                                    
  278 A:1138  8a                                 txa 
  279 A:1139  48                                 pha 
  280 A:113a  a2 22                              ldx #$22             ; loop to wait for response
  281 A:113c                           w0        
  281 A:113c                                    
  282 A:113c  20 a0 12                           jsr readiec                ; Read Serial Lines
  283 A:113f  90 05                              bcc w1                ; DATA still high, then next

  285 A:1141  68                                 pla 
  286 A:1142  aa                                 tax                    ; restore X
  287 A:1143  4c ac 12                           jmp restore                ; Restore Timing, return

  289 A:1146                           w1        
  289 A:1146                                    
  290 A:1146  ca                                 dex 
  291 A:1147  d0 f3                              bne w0
  292 A:1149  68                                 pla 
  293 A:114a  aa                                 tax 

  295 A:114b                                    ; -------------------------------------------------
  296 A:114b                           timeout   
  296 A:114b                                    
  297 A:114b  a9 03                              lda #$03             ; send timeout error
  298 A:114d  2c                                 .byt $2c

  300 A:114e                           devnotpres 
  300 A:114e                                    
  301 A:114e  a9 80                              lda #$80             ; Device not present error
  302 A:1150                           errout    
  302 A:1150                                    
  303 A:1150  48                                 pha 
  304 A:1151  ad 20 10                           lda BURST_FLG                ; Fast Serial Internal/External Flag
  305 A:1154  29 7f                              and #$7f
  306 A:1156  8d 20 10                           sta BURST_FLG                ; Fast Serial Internal/External Flag
  307 A:1159  68                                 pla 
  308 A:115a  20 d9 12                           jsr SETST                ; Set Status Bit
  309 A:115d  20 ac 12                           jsr restore                ; Restore Timing
  310 A:1160  18                                 clc 
  311 A:1161  4c 6c 12                           jmp resatn                ; Reset ATN

  313 A:1164                                    ; -------------------------------------------------
  314 A:1164                                    ; -acptr-

  316 A:1164                           IECIN     
  317 A:1164  20 aa 12                           jsr stabilize                ; Stabilize Timing

  319 A:1167  a9 00                              lda #$00
  320 A:1169  8d 1d 10                           sta BITCNT
  321 A:116c  a9 04                              lda #VIA_IRQ_SR
  322 A:116e  8d 5d e8                           sta VIA+VIA_IFR            ; clear interrupts

  324 A:1171  8a                                 txa 
  325 A:1172  48                                 pha                    ; save XR

  327 A:1173  20 7c 12                           jsr clkhi                ; Set Clock High

  329 A:1176                           inm1      
  330 A:1176  20 a0 12                           jsr readiec                ; Read Serial Lines
  331 A:1179  30 fb                              bmi inm1                ; wait for CLK high

  333 A:117b                           in0       
  333 A:117b                                    
  334 A:117b  a2 0d                              ldx #$0d             ; 13 iterations to wait for DATA low 

  336 A:117d  ad 50 e8                           lda VIA+VIA_PB
  337 A:1180  29 df                              and #255-P_DOUT         ; set DATA high
  338 A:1182  8d 50 e8                           sta VIA+VIA_PB

  340 A:1185                           in1       
  340 A:1185                                    
  341 A:1185  ad 50 e8                           lda VIA+VIA_PB
  342 A:1188  cd 50 e8                           cmp VIA+VIA_PB
  343 A:118b  d0 f8                              bne in1                ; debounce
  344 A:118d  0a                                 asl 
  345 A:118e  30 1f                              bmi rxdata                ; if CLK is low, continue (to E484)
  346 A:1190  ca                                 dex 
  347 A:1191  d0 f2                              bne in1                ; next try

  349 A:1193  ad 1d 10                           lda BITCNT
  350 A:1196  d0 10                              bne in2                ; EOI already received, then read timeout

  352 A:1198  20 97 12                           jsr datalo                ; Set Data Low
  353 A:119b  20 7c 12                           jsr clkhi                ; Set Clock High
  354 A:119e  a9 40                              lda #$40
  355 A:11a0  20 d9 12                           jsr SETST                ; Set Status Bit to EOI
  356 A:11a3  ee 1d 10                           inc BITCNT                ; set flag for EOI received
  357 A:11a6  d0 d3                              bne in0                ; always

  359 A:11a8                           in2       
  359 A:11a8                                    
  360 A:11a8  68                                 pla 
  361 A:11a9  aa                                 tax                    ; restore X
  362 A:11aa  a9 02                              lda #$02             ; read timeout
  363 A:11ac  4c 50 11                           jmp errout

  365 A:11af                           rxdata    
  365 A:11af                                    
  366 A:11af  a2 08                              ldx #$08             ; bit count

  368 A:11b1                           rx0       
  368 A:11b1                                    
  369 A:11b1  ad 5d e8                           lda VIA+VIA_IFR
  370 A:11b4  29 04                              and #VIA_IRQ_SR               ; is SR receive interrupt set?
  371 A:11b6  d0 29                              bne rxfast                ; yes, then receive fast byte

  373 A:11b8                                    ; receive slow byte

  375 A:11b8                           rxsl1     
  375 A:11b8                                    
  376 A:11b8  ad 50 e8                           lda VIA+VIA_PB
  377 A:11bb  cd 50 e8                           cmp VIA+VIA_PB
  378 A:11be  d0 f8                              bne rxsl1                ; debounce
  379 A:11c0  0a                                 asl                    ; put DATA into C
  380 A:11c1  30 ee                              bmi rx0                ; wait for CLK high

  382 A:11c3                           rxnxt     
  382 A:11c3                                    
  383 A:11c3  6e 1c 10                           ror RXBYT                ; save DATA in received byte

  385 A:11c6                           rxsl2     
  385 A:11c6                                    
  386 A:11c6  ad 50 e8                           lda VIA+VIA_PB
  387 A:11c9  cd 50 e8                           cmp VIA+VIA_PB
  388 A:11cc  d0 f8                              bne rxsl2
  389 A:11ce  0a                                 asl 
  390 A:11cf  10 f5                              bpl rxsl2                ; wait CLK low
  391 A:11d1  ca                                 dex 
  392 A:11d2  f0 1a                              beq rxend

  394 A:11d4                           rxsl3     
  394 A:11d4                                    
  395 A:11d4  ad 50 e8                           lda VIA+VIA_PB
  396 A:11d7  cd 50 e8                           cmp VIA+VIA_PB
  397 A:11da  d0 f8                              bne rxsl3
  397 A:11dc                                    
  398 A:11dc  0a                                 asl 
  399 A:11dd  30 f5                              bmi rxsl3
  399 A:11df                                    ; wait CLK high
  400 A:11df  10 e2                              bpl rxnxt                ; always, save next bit

  402 A:11e1                                    ; receive fast byte

  404 A:11e1                           rxfast    
  404 A:11e1                                    
  405 A:11e1  ad 5a e8                           lda VIA+VIA_SR
  406 A:11e4  49 ff                              eor #$ff
  407 A:11e6  8d 1c 10                           sta RXBYT
  408 A:11e9  a9 c0                              lda #$c0
  409 A:11eb  8d 20 10                           sta BURST_FLG                ; Fast Serial Internal/External Flag

  411 A:11ee                                    ; end slow/fast receive

  413 A:11ee                           rxend     
  413 A:11ee                                    
  414 A:11ee  68                                 pla 
  415 A:11ef  aa                                 tax 
  416 A:11f0  20 97 12                           jsr datalo                ; Set Data Low
  417 A:11f3  24 96                              bit STATUS                ; Status word ST
  418 A:11f5  50 03                              bvc rxe1
  419 A:11f7  20 6f 12                           jsr resclkdata                ; reset CLK+DATA
  420 A:11fa                           rxe1      
  420 A:11fa                                    
  421 A:11fa  20 ac 12                           jsr restore                ; Restore Timing
  422 A:11fd  ad 1c 10                           lda RXBYT
  423 A:1200  49 ff                              eor #$ff
  424 A:1202  18                                 clc 
  425 A:1203  60                                 rts 

  427 A:1204                                    ; -------------------------------------------------
  428 A:1204                                    ; -second-

  430 A:1204                           SECLISTEN 
  431 A:1204  8d 1f 10                           sta BYTE
  432 A:1207  20 9d 10                           jsr doseclisten

  434 A:120a                                    ; -------------------------------------------------
  435 A:120a                                    ; Set ATN High

  437 A:120a                           atnhi     
  437 A:120a                                    
  438 A:120a  ad 50 e8                           lda VIA+VIA_PB
  439 A:120d  29 f7                              and #255-P_AOUT
  440 A:120f  8d 50 e8                           sta VIA+VIA_PB
  441 A:1212  60                                 rts 

  443 A:1213                                    ; -------------------------------------------------
  444 A:1213                                    ; -tksa-

  446 A:1213                           SECTALK   
  447 A:1213  8d 1f 10                           sta BYTE
  448 A:1216  20 9d 10                           jsr doseclisten
  449 A:1219  24 96                              bit STATUS                ; Status word ST
  450 A:121b  30 4f                              bmi resatn                ; Reset ATN

  452 A:121d  20 aa 12                           jsr stabilize                ; Stabilize Timing
  453 A:1220  20 97 12                           jsr datalo                ; Set Data Low
  454 A:1223  20 0a 12                           jsr atnhi                ; Set ATN High
  455 A:1226  20 7c 12                           jsr clkhi                ; Set Clock High

  457 A:1229                           talk1     
  457 A:1229                                    
  458 A:1229  ad 50 e8                           lda VIA+VIA_PB            ; wait for CLK lo
  459 A:122c  cd 50 e8                           cmp VIA+VIA_PB
  460 A:122f  d0 f8                              bne talk1
  461 A:1231  0a                                 asl 
  462 A:1232  10 f5                              bpl talk1                ; loop on CLK hi
  463 A:1234  4c ac 12                           jmp restore                ; Restore Timing

  465 A:1237                                    ; -ciout-  Print Serial

  467 A:1237                           IECOUT    
  468 A:1237  2c 1e 10                           bit BUFFLG                ; is there a byte in the buffer?
  469 A:123a  30 06                              bmi out0                ; if yes, then send it
  470 A:123c  38                                 sec                    ; if not, ...
  471 A:123d  6e 1e 10                           ror BUFFLG                ; set flag for byte in buffer
  472 A:1240  d0 05                              bne retbyt                ; (always) store byte and end
  473 A:1242                           out0      
  473 A:1242                                    
  474 A:1242  48                                 pha                    ; save new byte
  475 A:1243  20 ad 10                           jsr bytout                ; Send Data from buffer On Serial Bus
  476 A:1246  68                                 pla 

  478 A:1247                           retbyt    
  478 A:1247                                    
  479 A:1247  8d 1f 10                           sta BYTE                ; store new byte into buffer
  480 A:124a  18                                 clc 
  481 A:124b  60                                 rts 

  483 A:124c                                    ; -------------------------------------------------
  484 A:124c                                    ; -untlk-
  485 A:124c                           UNTALK    
  486 A:124c  20 aa 12                           jsr stabilize                ; Stabilize Timing
  487 A:124f  20 85 12                           jsr clklo                ; Set Clock Low
  488 A:1252  ad 50 e8                           lda VIA+VIA_PB
  489 A:1255  09 08                              ora #P_AOUT               ;$08
  490 A:1257  8d 50 e8                           sta VIA+VIA_PB
  491 A:125a  a9 5f                              lda #$5f
  492 A:125c  2c                                 .byt $2c

  494 A:125d                                    ; -unlsn-
  495 A:125d                           UNLISTEN  
  496 A:125d  a9 3f                              lda #$3f
  497 A:125f  48                                 pha 
  498 A:1260  ad 20 10                           lda BURST_FLG                ; Fast Serial Internal/External Flag
  499 A:1263  29 7f                              and #$7f
  500 A:1265  8d 20 10                           sta BURST_FLG                ; Fast Serial Internal/External Flag
  501 A:1268  68                                 pla 
  502 A:1269  20 5b 10                           jsr sendatn

  504 A:126c                                    ; -------------------------------------------------
  505 A:126c                                    ; low level routines

  507 A:126c                                    ; Reset ATN

  509 A:126c                           resatn    
  509 A:126c                                    
  510 A:126c  20 0a 12                           jsr atnhi                ; Set ATN High

  512 A:126f                           resclkdata 
  513 A:126f  8a                                 txa 
  514 A:1270  a2 0a                              ldx #$0a

  516 A:1272                           rs1       
  516 A:1272                                    
  517 A:1272  ca                                 dex 
  518 A:1273  d0 fd                              bne rs1
  519 A:1275  aa                                 tax 
  520 A:1276  20 7c 12                           jsr clkhi                ; Set Clock High
  521 A:1279  4c 8e 12                           jmp datahi                ; Set Data High

  523 A:127c                                    ; Set Clock High

  525 A:127c                           clkhi     
  525 A:127c                                    
  526 A:127c  ad 50 e8                           lda VIA+VIA_PB
  527 A:127f  29 ef                              and #255-P_COUT         ; $EF
  528 A:1281  8d 50 e8                           sta VIA+VIA_PB
  529 A:1284  60                                 rts 

  531 A:1285                                    ; Set Clock Low

  533 A:1285                           clklo     
  533 A:1285                                    
  534 A:1285  ad 50 e8                           lda VIA+VIA_PB
  535 A:1288  09 10                              ora #P_COUT               ; $10
  536 A:128a  8d 50 e8                           sta VIA+VIA_PB
  537 A:128d  60                                 rts 

  539 A:128e                                    ; Set Data High

  541 A:128e                           datahi    
  541 A:128e                                    
  542 A:128e  ad 50 e8                           lda VIA+VIA_PB
  543 A:1291  29 df                              and #255-P_DOUT         ; $DF
  544 A:1293  8d 50 e8                           sta VIA+VIA_PB
  545 A:1296  60                                 rts 

  547 A:1297                                    ; Set Data Low

  549 A:1297                           datalo    
  549 A:1297                                    
  550 A:1297  ad 50 e8                           lda VIA+VIA_PB
  551 A:129a  09 20                              ora #P_DOUT               ; $20
  552 A:129c  8d 50 e8                           sta VIA+VIA_PB
  553 A:129f  60                                 rts 

  555 A:12a0                                    ; Read Serial Lines

  557 A:12a0                                    ; return DATA in C, CLK in N-flag
  558 A:12a0                                     .assert P_DATA=$80,"Bit check mismatch"
  559 A:12a0                                     .assert P_CLK=$40,"Bit check mismatch"
  560 A:12a0                           readiec   
  560 A:12a0                                    
  561 A:12a0  ad 50 e8                           lda VIA+VIA_PB
  562 A:12a3  cd 50 e8                           cmp VIA+VIA_PB
  563 A:12a6  d0 f8                              bne readiec                ; Read Serial Lines
  564 A:12a8  0a                                 asl 
  565 A:12a9  60                                 rts 

  567 A:12aa                                    ; -------------------------------------------------
  568 A:12aa                                    ; Stabilize Timing
  569 A:12aa                                    ; 
  570 A:12aa                                    ; SAVE_FAST stores a copy of the VIC-IIe FAST register
  571 A:12aa                                    ; As unused bits read '1', bit 7 is usually set.
  572 A:12aa                                    ; Except when we clear SAVE_FAST. This is used to 
  573 A:12aa                                    ; indicate if we have previously checked the speed.
  574 A:12aa                                    ;

  576 A:12aa                           stabilize 
  576 A:12aa                                    
  577 A:12aa  78                                 sei 
  578 A:12ab  60                                 rts 
  579 A:12ac                                    ;E573: SEI
  580 A:12ac                                    ;
  581 A:12ac                                    ;E574: BIT $0A3A ; flag $0a3a.7 set?
  582 A:12ac                                    ;E577: BMI stabend ; yes, then end
  583 A:12ac                                    ;E579: BIT SAVE_FAST ; have we checked speed before?
  584 A:12ac                                    ;E57C: BMI stabend ; yes, then end
  585 A:12ac                                    ;
  586 A:12ac                                    ;E57E: LDA VIC+VIC_FAST ; VIC-IIe FAST; bit 0 set is 2MHz
  587 A:12ac                                    ;E581: STA SAVE_FAST ; save value (sets bit 7 - unused bits read 1)
  588 A:12ac                                    ;E584: LDA VIC+VIC_SPRT ; Sprite enable register
  589 A:12ac                                    ;E587: STA SAVE_SPRT ; save value
  590 A:12ac                                    ;
  591 A:12ac                                    ;E58A: LDA #$00 
  592 A:12ac                                    ;E58C: STA VIC+VIC_SPRT ; disable all sprites
  593 A:12ac                                    ;E58F: STA VIC+VIC_FAST ; go to slow mode
  594 A:12ac                                    ;
  595 A:12ac                                    ;E592: LDA SAVE_SPRT ; have any sprites been enabled?
  596 A:12ac                                    ;E595: BEQ stabend ; no, then end
  597 A:12ac                                    ;E597: TXA  ; otherwise delay at least one rasterline
  598 A:12ac                                    ;E598: LDX #$00
  599 A:12ac                                    ;
  600 A:12ac                                    ;stab0:
  601 A:12ac                                    ;E59A: DEX
  602 A:12ac                                    ;E59B: BNE stab0
  603 A:12ac                                    ;E59D: TAX
  604 A:12ac                                    ;
  605 A:12ac                                    ;stabend:
  606 A:12ac                                    ;E59E: RTS
  607 A:12ac                                    ;
  608 A:12ac                                    ; Restore Timing

  610 A:12ac                           restore   
  610 A:12ac                                    
  611 A:12ac  58                                 cli 
  612 A:12ad  60                                 rts 
  613 A:12ae                                    ;E59F: BIT $0A3A ; flag $0a3a.7 is set?
  614 A:12ae                                    ;E5A2: BMI restend ; yes then end
  615 A:12ae                                    ;E5A4: BIT SAVE_FAST ; timing changed (from Stabilize timing above)?
  616 A:12ae                                    ;E5A7: BPL restend ; no then end
  617 A:12ae                                    ;
  618 A:12ae                                    ;E5A9: LDA SAVE_SPRT
  619 A:12ae                                    ;E5AC: STA VIC+VIC_SPRT
  620 A:12ae                                    ;E5AF: LDA SAVE_FAST
  621 A:12ae                                    ;E5B2: STA VIC+VIC_FAST
  622 A:12ae                                    ;E5B5: LDA #$00 ; store zero in FAST store byte
  623 A:12ae                                    ;E5B7: STA SAVE_FAST ; make sure next time we check timing
  624 A:12ae                                    ;
  625 A:12ae                                    ;restend:
  626 A:12ae                                    ;E5BA: CLI
  627 A:12ae                                    ;E5BB: RTS

  629 A:12ae                                    ; -------------------------------------------------
  630 A:12ae                                    ; Prepare For Response

  632 A:12ae                           prep4res  
  632 A:12ae                                    
  633 A:12ae  ad 5d e8                           lda VIA+VIA_IFR
  634 A:12b1  29 04                              and #VIA_IRQ_SR               ; wait for SDR full interrupt source
  635 A:12b3  f0 f9                              beq prep4res                ; Prepare For Response
  636 A:12b5  8d 5d e8                           sta VIA+VIA_IFR

  638 A:12b8                                    ; Fast Disk Off

  640 A:12b8                           fastoff   
  640 A:12b8                                    
  641 A:12b8  a9 0c                              lda #%00001100             ; shift in under ext clock
  642 A:12ba  8d 5b e8                           sta VIA+VIA_ACR

  644 A:12bd  ad 50 e8                           lda VIA+VIA_PB            ; enable fast serial _input_
  645 A:12c0  09 01                              ora #P_FSDIR
  646 A:12c2  8d 50 e8                           sta VIA+VIA_PB
  647 A:12c5  60                                 rts 

  649 A:12c6                                    ; Fast Disk On

  651 A:12c6                           faston    
  651 A:12c6                                    
  652 A:12c6  ad 50 e8                           lda VIA+VIA_PB            ; enable fast serial _output_
  653 A:12c9  29 fe                              and #255-P_FSDIR
  654 A:12cb  8d 50 e8                           sta VIA+VIA_PB

  656 A:12ce                                    ;lda VIA+VIA_SR  ; dummy read
  657 A:12ce  a9 14                              lda #%00010100             ; shift out under T2 control
  658 A:12d0  8d 5b e8                           sta VIA+VIA_ACR
  659 A:12d3                                    ;LDA #VIA_IRQ_SR
  660 A:12d3                                    ;STA VIA+VIA_IFR  ; clear SR interrupts
  661 A:12d3  a9 00                              lda #>T2VAL
  662 A:12d5  8d 59 e8                           sta VIA+VIA_T2H            ; restart the timer
  663 A:12d8                                    ;lda VIA+VIA_SR
  664 A:12d8  60                                 rts 

  667 A:12d9                           SETST     
  667 A:12d9                                    
  668 A:12d9  05 96                              ora STATUS
  669 A:12db  85 96                              sta STATUS
  670 A:12dd  60                                 rts 

  672 A:12de                                    ; -------------------------------------------------
  673 A:12de                                    ; -------------------------------------------------
