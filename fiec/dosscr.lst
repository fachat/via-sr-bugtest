
dosscr.a65


   12 A:1000                                    DEV=9

   14 A:1000  01 04                              .word $0401
   15 A:1002                                     *= $0401

   17 A:0401  0b 04                              .word eol                ; BASIC link pointer
   18 A:0403  0a 00                              .word 10              ; line number
   19 A:0405  9e 31 30 34 30 00                  .byt $9e,"1040",0 ; BASIC code (tokenized)
   20 A:040b  00 00                    eol       .word 0           ; BASIC link pointer, 0 means end of code
   21 A:040d  00 ff 10                           .dsb 1040-*

   23 A:0410                           start     
   24 A:0410  20 4a 05                           jsr fiec_init

   26 A:0413  20 1a 04                           jsr send_cmd

   28 A:0416  20 95 04                           jsr read_st

   30 A:0419  60                                 rts 

   32 A:041a                           send_cmd  
   33 A:041a                                     .( 
   34 A:041a  a9 00                              lda #0
   35 A:041c  8d 96 00                           sta STATUS

   37 A:041f  a9 09                              lda #DEV
   38 A:0421  20 82 05                           jsr LISTEN

   40 A:0424  a9 6f                              lda #15+$60
   41 A:0426  20 2d 07                           jsr SECLISTEN

   43 A:0429  a0 00                              ldy #0
   44 A:042b  b9 3a 04                 l         lda cmd,y
   45 A:042e  f0 06                              beq le
   46 A:0430  20 60 07                           jsr IECOUT
   47 A:0433  c8                                 iny 
   48 A:0434  d0 f5                              bne l
   49 A:0436                           le        
   50 A:0436  20 86 07                           jsr UNLISTEN
   51 A:0439  60                                 rts 

   53 A:043a  53 30 3a 50 53 45 55 ... cmd       .asc "S0:PSEUDO64K",0

   55 A:0447                                     .) 

common.a65


    3 A:0447                                    ; ---------------------------------------
    4 A:0447                                    ; print text
    5 A:0447                                    ; note self-modifying code so we don't use zeropage

    7 A:0447                           txtout    .( 
    8 A:0447  8d 50 04                           sta taddr
    9 A:044a  8c 51 04                           sty taddr+1
   10 A:044d  a0 00                              ldy #0
   11 A:044f  b9 ff ff                 l         lda -1,y
   12 A:0452                                    taddr=l+1
   13 A:0452  f0 06                              beq t2
   14 A:0454  20 d2 ff                           jsr $ffd2
   15 A:0457  c8                                 iny 
   16 A:0458  d0 f5                              bne l
   17 A:045a  60                       t2        rts 
   18 A:045b                                     .) 

   22 A:045b                                    ; ---------------------------
   23 A:045b                                    ; for simplicity, and we only need random data to compare,
   24 A:045b                                    ; not any scientifically "valid" randomness, we use a
   25 A:045b                                    ; the PRNG from here https:
   26 A:045b                                    ; with a fixed seed of $3d67 to achieve a period of the full 64k

   28 A:045b                                     .( 
   29 A:045b                                    rng_s=43714
   30 A:045b                                    rng_magic=$3d67

   32 A:045b  00 00                    state     .word 0

   34 A:045d  a9 c2                    rng_init  lda #<rng_s
   35 A:045f  8d 5b 04                           sta state
   36 A:0462  a9 aa                              lda #>rng_s
   37 A:0464  8d 5c 04                           sta state+1
   38 A:0467  60                                 rts 

   40 A:0468                           rng_next  
   41 A:0468  ad 5b 04                           lda state
   42 A:046b  f0 1a                              beq lowZero                ; $0000 and $8000 are special values to test for

   44 A:046d                                    ; Do a normal shift
   45 A:046d  0e 5b 04                           asl state
   46 A:0470  ad 5c 04                           lda state+1
   47 A:0473  2a                                 rol 
   48 A:0474  90 1b                              bcc noEor

   50 A:0476                           doEor     
   50 A:0476                                    
   51 A:0476                                    ; high byte is in .A
   52 A:0476  49 3d                              eor #>rng_magic
   53 A:0478  8d 5c 04                           sta state+1
   54 A:047b  ad 5b 04                           lda state
   55 A:047e  49 67                              eor #<rng_magic
   56 A:0480  8d 5b 04                           sta state
   57 A:0483  ad 5c 04                           lda state+1          ; return the high byte of the state
   58 A:0486  60                                 rts 

   60 A:0487                           lowZero   
   60 A:0487                                    
   61 A:0487  ad 5c 04                           lda state+1
   62 A:048a  f0 ea                              beq doEor                ; High byte is also zero, so apply the EOR
   63 A:048c                                    ; For speed, you could store 'magic' into 'state' directly
   64 A:048c                                    ; instead of running the EORs

   66 A:048c                                    ; wasn't zero, check for $8000
   67 A:048c  0a                                 asl 
   68 A:048d  f0 02                              beq noEor                ; if $00 is left after the shift, then it was $80
   69 A:048f  b0 e5                              bcs doEor                ; else, do the EOR based on the carry bit as usual

   71 A:0491                           noEor     
   71 A:0491                                    
   72 A:0491  8d 5c 04                           sta state+1
   73 A:0494  60                                 rts 
   74 A:0495                                     .) 

   76 A:0495                                    ; ---------------------------------------------
   77 A:0495                                    ; read and print the disk status

   79 A:0495                           read_st   .( 
   80 A:0495  20 0b 05                           jsr crout

   82 A:0498  a9 00                              lda #0
   83 A:049a  8d 96 00                           sta STATUS

   85 A:049d  a9 09                              lda #DEV
   86 A:049f  20 7f 05                           jsr TALK

   88 A:04a2  a9 6f                              lda #15+$60
   89 A:04a4  20 3c 07                           jsr SECTALK
   90 A:04a7                           in        
   91 A:04a7  20 8d 06                           jsr IECIN

   93 A:04aa  c9 20                              cmp #$20
   94 A:04ac  90 08                              bcc noprint
   95 A:04ae  c9 80                              cmp #$80
   96 A:04b0  90 06                              bcc print
   97 A:04b2  c9 a0                              cmp #$a0
   98 A:04b4  b0 02                              bcs print
   99 A:04b6  a9 2e                    noprint   lda #"."
  100 A:04b8  20 d2 ff                 print     jsr $ffd2

  102 A:04bb  ad 96 00                           lda STATUS
  103 A:04be  f0 e7                              beq in

  105 A:04c0  4c 75 07                           jmp UNTALK
  106 A:04c3                                     .) 

  108 A:04c3                                    ; ---------------------------------------------
  109 A:04c3                                    ; https:

  111 A:04c3                           print_int16 .( 

  113 A:04c3                                    RomCOut=$ffd2
  114 A:04c3                                    DEC_DIGITS=5

  116 A:04c3                                    ;-------------------------------
  117 A:04c3                                    ; Print U16 as decimal via COUT
  118 A:04c3                                    ; IN: X=hi, A=Lo
  119 A:04c3                                    ; OUT: X=$FF, Y=$00
  120 A:04c3                                    ;-------------------------------
  121 A:04c3                           DecPrintU16 
  122 A:04c3  48                                 pha 
  123 A:04c4  8a                                 txa 
  124 A:04c5                                    DecModLen=*+1
  125 A:04c5                           MOD       
  125 A:04c5  a2 04                              ldx #DEC_DIGITS-1
  126 A:04c7  a0 ff                              ldy #<-1
  127 A:04c9  8c 05 05                           sty DecCtr

  129 A:04cc                           Loop      
  129 A:04cc  c8                                 iny 
  130 A:04cd  8d 07 05                           sta DecWord+1
  131 A:04d0  68                                 pla 
  132 A:04d1  8d 06 05                           sta DecWord

  134 A:04d4                           DoDigit   
  134 A:04d4  38                                 sec 
  135 A:04d5  fd fc 04                           sbc Power10L-1,x
  136 A:04d8  48                                 pha 
  137 A:04d9  ad 07 05                           lda DecWord+1
  138 A:04dc  fd 00 05                           sbc Power10H-1,x
  139 A:04df  b0 eb                              bcs Loop

  141 A:04e1                           GotDigit  
  141 A:04e1                                    
  142 A:04e1  68                                 pla 
  143 A:04e2  98                                 tya 
  144 A:04e3  d0 05                              bne PrDigit                ;Print all non-zero digits

  146 A:04e5                           do DEC_SKIP0 
  147 A:04e5  ee 05 05                           inc DecCtr
  148 A:04e8  10 07                              bpl NoDigit                ;Skip leading zeroes

  150 A:04ea                           PrDigit   
  150 A:04ea  49 30                              eor #"0"
  151 A:04ec  20 d2 ff                           jsr RomCOut
  152 A:04ef  a0 00                              ldy #0
  153 A:04f1                           NoDigit   
  153 A:04f1                                    
  154 A:04f1  ce 05 05                           dec DecCtr
  155 A:04f4  ad 06 05                           lda DecWord
  156 A:04f7  ca                                 dex 
  157 A:04f8  f0 f0                              beq PrDigit
  158 A:04fa  10 d8                              bpl DoDigit
  159 A:04fc  60                                 rts 

  161 A:04fd  0a 64 e8 10              Power10L  .byt <10,<100,<1000,<10000
  162 A:0501  00 00 03 27              Power10H  .byt >10,>100,>1000,>10000

  164 A:0505  00                       DecCtr    .byt 0
  165 A:0506  00 00                    DecWord   .word 0
  166 A:0508                                     .) 

  168 A:0508                                    ; ---------------------------------------------

  170 A:0508  a9 3a                    cout      lda #":"
  171 A:050a  2c                                 .byt $2c
  172 A:050b  a9 0d                    crout     lda #13
  173 A:050d  2c                                 .byt $2c
  174 A:050e  a9 20                    spout     lda #" "
  175 A:0510  4c d2 ff                           jmp $ffd2

  177 A:0513                           hexout    .( 
  178 A:0513  48                                 pha 
  179 A:0514  4a                                 lsr 
  180 A:0515  4a                                 lsr 
  181 A:0516  4a                                 lsr 
  182 A:0517  4a                                 lsr 
  183 A:0518  20 1c 05                           jsr nibout
  184 A:051b  68                                 pla 
  185 A:051c  29 0f                    nibout    and #$0f
  186 A:051e  c9 0a                              cmp #10
  187 A:0520  90 02                              bcc pdec
  188 A:0522  69 66                              adc #$66
  189 A:0524  49 30                    pdec      eor #$30
  190 A:0526  4c d2 ff                           jmp $ffd2
  191 A:0529                                     .) 

dosscr.a65


upet-fiec-core.a65


    2 A:0529                                    ; from https:

    4 A:0529                                    ; changes between the C128/C64 and the uPET:
    5 A:0529                                    ; - VIA instead of CIA, but pinout on ATN, CLK, DATA same
    6 A:0529                                    ; - Use port bit 0 for fast serial direction
    7 A:0529                                    ; - The C64 has input bits directly at CIA; uPET has inverters

   10 A:0529                                    ; *=$4000

   12 A:0529                                    ; -------------------------------------------------
   13 A:0529                                    ; IO

   15 A:0529  4c 2d 07                           jmp SECLISTEN                ; fiec_secnd   ; 0
   16 A:052c  4c 3c 07                           jmp SECTALK                ; fiec_tksa    ; 1
   17 A:052f  4c 8d 06                           jmp IECIN                ; fiec_acptr   ; 2
   18 A:0532  4c 60 07                           jmp IECOUT                ; fiec_ciout   ; 3
   19 A:0535  4c 75 07                           jmp UNTALK                ; fiec_untlk   ; 4
   20 A:0538  4c 86 07                           jmp UNLISTEN                ; fiec_unlsn   ; 5
   21 A:053b  4c 82 05                           jmp LISTEN                ; fiec_listn   ; 6
   22 A:053e  4c 7f 05                           jmp TALK                ; fiec_talk    ; 7

   24 A:0541                                    ; init/meta
   25 A:0541  4c 4a 05                           jmp fiec_init                ; 8   ; 15

   27 A:0544                                    VIA=$e850

   29 A:0544                                    T2VAL=4

   31 A:0544                                    VIA_PB=0
   32 A:0544                                    VIA_DDRB=2
   33 A:0544                                    VIA_T2L=8
   34 A:0544                                    VIA_T2H=9
   35 A:0544                                    VIA_SR=10
   36 A:0544                                    VIA_ACR=11
   37 A:0544                                    VIA_PCR=12
   38 A:0544                                    VIA_IFR=13
   39 A:0544                                    VIA_IER=14

   41 A:0544                                    VIA_IRQ_SR=%00000100

   43 A:0544                                    P_DATA=$80
   44 A:0544                                    P_CLK=$40
   45 A:0544                                    P_DOUT=$20
   46 A:0544                                    P_COUT=$10
   47 A:0544                                    P_AOUT=$08
   48 A:0544                                    P_FSDIR=$01

   50 A:0544                                    ; -------------------------------------------------
   51 A:0544                                    ; Memory locations

   64 A:0544  00                       EOIFL     .byt 0
   65 A:0545  00                       RXBYT     .byt 0
   66 A:0546  00                       BITCNT    .byt 0
   67 A:0547  00                       BUFFLG    .byt 0
   68 A:0548  00                       BYTE      .byt 0
   69 A:0549  00                       BURST_FLG .byt 0

   72 A:054a                                    STATUS=$96

   77 A:054a                                    ; -------------------------------------------------
   78 A:054a                                    ; Constants

   80 A:054a                                    IEC_TALK=$40
   81 A:054a                                    IEC_LISTEN=$20
   82 A:054a                                    IEC_UNTALK=$5f
   83 A:054a                                    IEC_UNLISTN=$3f

   85 A:054a                                    ; -------------------------------------------------

   87 A:054a                           fiec_init 
   87 A:054a                                    ; TODO
   88 A:054a  a9 7f                              lda #$7f
   89 A:054c  8d 5e e8                           sta VIA+VIA_IER
   90 A:054f  8d 5d e8                           sta VIA+VIA_IFR
   91 A:0552  a9 39                              lda #%00111001
   92 A:0554  8d 52 e8                           sta VIA+VIA_DDRB
   93 A:0557  a9 01                              lda #%00000001
   94 A:0559  8d 50 e8                           sta VIA+VIA_PB
   95 A:055c  20 e1 07                           jsr fastoff
   96 A:055f  a9 00                              lda #$00
   97 A:0561  8d 49 05                           sta BURST_FLG
   98 A:0564  a9 00                              lda #0
   99 A:0566  8d 47 05                           sta BUFFLG
  100 A:0569  85 96                              sta STATUS
  101 A:056b  8d 44 05                           sta EOIFL
  102 A:056e                                    ;LDA #$00
  103 A:056e  8d 5b e8                           sta VIA+VIA_ACR
  104 A:0571  8d 5c e8                           sta VIA+VIA_PCR
  105 A:0574  a9 04                              lda #<T2VAL
  106 A:0576  8d 58 e8                           sta VIA+VIA_T2L            ; set timer for SR
  107 A:0579  a9 00                              lda #>T2VAL
  108 A:057b  8d 59 e8                           sta VIA+VIA_T2H
  109 A:057e  60                                 rts 

  111 A:057f                                    ; -------------------------------------------------
  112 A:057f                                    ; -talk-

  114 A:057f                           TALK      
  114 A:057f                                    
  115 A:057f  09 40                              ora #IEC_TALK
  116 A:0581  2c                                 .byt $2c

  118 A:0582                                    ; -listen-

  120 A:0582                           LISTEN    
  120 A:0582                                    
  121 A:0582  09 20                              ora #IEC_LISTEN

  123 A:0584                                    ; ignore
  124 A:0584                                    ;JSR ILRS232 ; Interlock RS-232/Serial

  126 A:0584                           sendatn   
  126 A:0584                                    
  127 A:0584  48                                 pha                    ; save byte

  129 A:0585  a9 00                              lda #0
  130 A:0587  85 96                              sta STATUS                ; clear status

  132 A:0589  2c 47 05                           bit BUFFLG                ; byte in out buffer?
  133 A:058c  10 0d                              bpl nobuf                ; no, directly to out-with-atn

  135 A:058e  38                                 sec 
  136 A:058f  6e 44 05                           ror EOIFL                ; set EOI
  137 A:0592  20 d6 05                           jsr bytout                ; Send Data On Serial Bus
  138 A:0595  4e 47 05                           lsr BUFFLG                ; clear buffer flag
  139 A:0598  4e 44 05                           lsr EOIFL                ; clear EOI
  140 A:059b                           nobuf     
  140 A:059b                                    
  141 A:059b  68                                 pla                    ; restore byte
  142 A:059c  8d 48 05                           sta BYTE                ; byte to send

  144 A:059f  20 d3 07                           jsr stabilize                ; Stabilize Timing

  146 A:05a2  20 b7 07                           jsr datahi                ; Set Data High
  147 A:05a5  ad 50 e8                           lda VIA+VIA_PB
  148 A:05a8  29 08                              and #P_AOUT               ; is ATN already set?
  149 A:05aa  d0 12                              bne atnison                ; yes, skip

  151 A:05ac  20 ef 07                           jsr faston                ; Fast Disk On (set SR to output)

  153 A:05af  a9 ff                              lda #$ff
  154 A:05b1  8d 5a e8                           sta VIA+VIA_SR            ; send $ff, i.e. DATA stays high, FCLK (SRQ) toggles

  156 A:05b4  20 d7 07                           jsr prep4res                ; Prepare For Response, includes Fast serial off?

  158 A:05b7  8a                                 txa                    ; wait loop
  159 A:05b8  a2 14                              ldx #$14             ; 143 cycles total (inc. TXA/TAX)
  160 A:05ba                           atnl      
  160 A:05ba                                    
  161 A:05ba  ca                                 dex 
  162 A:05bb  d0 fd                              bne atnl
  163 A:05bd  aa                                 tax 

  165 A:05be                                    ; skip here if ATN is already set
  166 A:05be                           atnison   
  166 A:05be                                    
  167 A:05be  ad 50 e8                           lda VIA+VIA_PB
  168 A:05c1  09 08                              ora #P_AOUT               ; set ATN active
  169 A:05c3  8d 50 e8                           sta VIA+VIA_PB

  171 A:05c6                                    ; entry point to send SECLISTEN

  173 A:05c6                           doseclisten 
  173 A:05c6                                    
  174 A:05c6  20 d3 07                           jsr stabilize                ; Stabilize Timing
  175 A:05c9  20 ae 07                           jsr clklo                ; Set Clock Low
  176 A:05cc  20 b7 07                           jsr datahi                ; Set Data High

  178 A:05cf  8a                                 txa                    ; wait loop
  179 A:05d0  a2 b8                              ldx #$b8             ; 1291 cycles total (incl. TXA/TAX)
  180 A:05d2                           delay     
  180 A:05d2                                    
  181 A:05d2  ca                                 dex 
  182 A:05d3  d0 fd                              bne delay
  183 A:05d5  aa                                 tax 

  185 A:05d6                                    ; Send Data On Serial Bus

  187 A:05d6                           bytout    
  187 A:05d6                                    
  188 A:05d6  20 d3 07                           jsr stabilize                ; Stabilize Timing
  189 A:05d9  20 b7 07                           jsr datahi                ; Set Data High
  190 A:05dc  20 c9 07                           jsr readiec                ; Read Serial Lines
  191 A:05df  b0 03                              bcs devpres                ; check if data is high
  192 A:05e1  4c 77 06                           jmp devnotpres                ; if so, no device present
  193 A:05e4                           devpres   
  193 A:05e4                                    
  194 A:05e4                                    ;lda #VIA_IRQ_SR
  195 A:05e4                                    ;sta VIA+VIA_IFR
  196 A:05e4  ad 5a e8                           lda VIA+VIA_SR            ; clear interrupts

  198 A:05e7  20 a5 07                           jsr clkhi                ; Set Clock High
  199 A:05ea  2c 44 05                           bit EOIFL                ; shall we send EOI?
  200 A:05ed  10 0a                              bpl notxeoi                ; no, skip waiting for EOI acknowledge

  202 A:05ef                           wdatahi   
  202 A:05ef                                    
  203 A:05ef  20 c9 07                           jsr readiec                ; Read Serial Lines
  204 A:05f2  b0 fb                              bcs wdatahi                ; wait for DATA high

  206 A:05f4                           wdatalo   
  206 A:05f4                                    
  207 A:05f4  20 c9 07                           jsr readiec                ; Read Serial Lines
  208 A:05f7  90 fb                              bcc wdatalo                ; wait for DATA low

  210 A:05f9                           notxeoi   
  210 A:05f9                                    ; loop waiting for DATA going hi, or rx'ing a fast marker byte
  211 A:05f9  ad 50 e8                           lda VIA+VIA_PB
  212 A:05fc  cd 50 e8                           cmp VIA+VIA_PB
  213 A:05ff  d0 f8                              bne notxeoi                ; debounce serial lines
  214 A:0601  48                                 pha 
  215 A:0602  ad 5d e8                           lda VIA+VIA_IFR
  216 A:0605  29 04                              and #VIA_IRQ_SR               ; check if SR has received a byte
  217 A:0607  f0 05                              beq slowdrv                ; no, then skip

  219 A:0609  a9 c0                              lda #$c0             ; set flag that drive is FAST
  220 A:060b  8d 49 05                           sta BURST_FLG                ; Fast Serial Internal/External Flag

  222 A:060e                           slowdrv   
  222 A:060e                                    
  223 A:060e  68                                 pla 
  224 A:060f  30 e8                              bmi notxeoi                ; wait for DATA high (note: we did not do an ASL)

  226 A:0611  09 10                              ora #P_COUT               ; When device has set CLK high, set CLK low ourself
  227 A:0613  8d 50 e8                           sta VIA+VIA_PB
  228 A:0616  29 08                              and #P_AOUT               ; is ATN output active?
  229 A:0618  d0 14                              bne txslow                ; yes, then skip

  231 A:061a  2c 49 05                           bit BURST_FLG                ; Fast Serial Internal/External Flag
  232 A:061d  10 0f                              bpl txslow                ; not fast, then skip

  234 A:061f  20 ef 07                           jsr faston                ; Fast Disk On
  235 A:0622  ad 48 05                           lda BYTE
  236 A:0625  8d 5a e8                           sta VIA+VIA_SR            ; send byte via SR
  237 A:0628  20 d7 07                           jsr prep4res                ; Prepare For Response
  238 A:062b  4c 61 06                           jmp endtx                ; finish sending via SR

  240 A:062e                                    ; send slow byte
  241 A:062e                           txslow    
  241 A:062e                                    
  242 A:062e  a9 08                              lda #$08
  243 A:0630  8d 46 05                           sta BITCNT

  245 A:0633                                     .assert P_DATA=$80,"Bit check mismatch"

  247 A:0633                           txsl1     
  247 A:0633                                    
  248 A:0633  ad 50 e8                           lda VIA+VIA_PB
  249 A:0636  cd 50 e8                           cmp VIA+VIA_PB
  250 A:0639  d0 f8                              bne txsl1                ; debounce
  251 A:063b  0a                                 asl 
  252 A:063c  b0 36                              bcs timeout                ; if DATA is low, return send timeout

  254 A:063e  6e 48 05                           ror BYTE                ; set DATA out to bit
  255 A:0641  b0 05                              bcs hiout
  256 A:0643  20 c0 07                           jsr datalo                ; Set Data Low
  257 A:0646  d0 03                              bne clkout

  259 A:0648                           hiout     
  259 A:0648                                    
  260 A:0648  20 b7 07                           jsr datahi                ; Set Data High

  262 A:064b                           clkout    
  262 A:064b                                    
  263 A:064b  20 a5 07                           jsr clkhi                ; Set Clock High
  264 A:064e  ea                                 nop 
  265 A:064f  ea                                 nop 
  266 A:0650  ea                                 nop 
  267 A:0651  ea                                 nop 
  268 A:0652  ad 50 e8                           lda VIA+VIA_PB
  269 A:0655  29 df                              and #255-P_DOUT         ; DATA high again
  270 A:0657  09 10                              ora #P_COUT               ; CLK low again
  271 A:0659  8d 50 e8                           sta VIA+VIA_PB
  272 A:065c  ce 46 05                           dec BITCNT                ; next bit
  273 A:065f  d0 d2                              bne txsl1

  275 A:0661                                    ; finish sending via SR

  277 A:0661                           endtx     
  277 A:0661                                    
  278 A:0661  8a                                 txa 
  279 A:0662  48                                 pha 
  280 A:0663  a2 22                              ldx #$22             ; loop to wait for response
  281 A:0665                           w0        
  281 A:0665                                    
  282 A:0665  20 c9 07                           jsr readiec                ; Read Serial Lines
  283 A:0668  90 05                              bcc w1                ; DATA still high, then next

  285 A:066a  68                                 pla 
  286 A:066b  aa                                 tax                    ; restore X
  287 A:066c  4c d5 07                           jmp restore                ; Restore Timing, return

  289 A:066f                           w1        
  289 A:066f                                    
  290 A:066f  ca                                 dex 
  291 A:0670  d0 f3                              bne w0
  292 A:0672  68                                 pla 
  293 A:0673  aa                                 tax 

  295 A:0674                                    ; -------------------------------------------------
  296 A:0674                           timeout   
  296 A:0674                                    
  297 A:0674  a9 03                              lda #$03             ; send timeout error
  298 A:0676  2c                                 .byt $2c

  300 A:0677                           devnotpres 
  300 A:0677                                    
  301 A:0677  a9 80                              lda #$80             ; Device not present error
  302 A:0679                           errout    
  302 A:0679                                    
  303 A:0679  48                                 pha 
  304 A:067a  ad 49 05                           lda BURST_FLG                ; Fast Serial Internal/External Flag
  305 A:067d  29 7f                              and #$7f
  306 A:067f  8d 49 05                           sta BURST_FLG                ; Fast Serial Internal/External Flag
  307 A:0682  68                                 pla 
  308 A:0683  20 02 08                           jsr SETST                ; Set Status Bit
  309 A:0686  20 d5 07                           jsr restore                ; Restore Timing
  310 A:0689  18                                 clc 
  311 A:068a  4c 95 07                           jmp resatn                ; Reset ATN

  313 A:068d                                    ; -------------------------------------------------
  314 A:068d                                    ; -acptr-

  316 A:068d                           IECIN     
  317 A:068d  20 d3 07                           jsr stabilize                ; Stabilize Timing

  319 A:0690  a9 00                              lda #$00
  320 A:0692  8d 46 05                           sta BITCNT
  321 A:0695  a9 04                              lda #VIA_IRQ_SR
  322 A:0697  8d 5d e8                           sta VIA+VIA_IFR            ; clear interrupts

  324 A:069a  8a                                 txa 
  325 A:069b  48                                 pha                    ; save XR

  327 A:069c  20 a5 07                           jsr clkhi                ; Set Clock High

  329 A:069f                           inm1      
  330 A:069f  20 c9 07                           jsr readiec                ; Read Serial Lines
  331 A:06a2  30 fb                              bmi inm1                ; wait for CLK high

  333 A:06a4                           in0       
  333 A:06a4                                    
  334 A:06a4  a2 0d                              ldx #$0d             ; 13 iterations to wait for DATA low 

  336 A:06a6  ad 50 e8                           lda VIA+VIA_PB
  337 A:06a9  29 df                              and #255-P_DOUT         ; set DATA high
  338 A:06ab  8d 50 e8                           sta VIA+VIA_PB

  340 A:06ae                           in1       
  340 A:06ae                                    
  341 A:06ae  ad 50 e8                           lda VIA+VIA_PB
  342 A:06b1  cd 50 e8                           cmp VIA+VIA_PB
  343 A:06b4  d0 f8                              bne in1                ; debounce
  344 A:06b6  0a                                 asl 
  345 A:06b7  30 1f                              bmi rxdata                ; if CLK is low, continue (to E484)
  346 A:06b9  ca                                 dex 
  347 A:06ba  d0 f2                              bne in1                ; next try

  349 A:06bc  ad 46 05                           lda BITCNT
  350 A:06bf  d0 10                              bne in2                ; EOI already received, then read timeout

  352 A:06c1  20 c0 07                           jsr datalo                ; Set Data Low
  353 A:06c4  20 a5 07                           jsr clkhi                ; Set Clock High
  354 A:06c7  a9 40                              lda #$40
  355 A:06c9  20 02 08                           jsr SETST                ; Set Status Bit to EOI
  356 A:06cc  ee 46 05                           inc BITCNT                ; set flag for EOI received
  357 A:06cf  d0 d3                              bne in0                ; always

  359 A:06d1                           in2       
  359 A:06d1                                    
  360 A:06d1  68                                 pla 
  361 A:06d2  aa                                 tax                    ; restore X
  362 A:06d3  a9 02                              lda #$02             ; read timeout
  363 A:06d5  4c 79 06                           jmp errout

  365 A:06d8                           rxdata    
  365 A:06d8                                    
  366 A:06d8  a2 08                              ldx #$08             ; bit count

  368 A:06da                           rx0       
  368 A:06da                                    
  369 A:06da  ad 5d e8                           lda VIA+VIA_IFR
  370 A:06dd  29 04                              and #VIA_IRQ_SR               ; is SR receive interrupt set?
  371 A:06df  d0 29                              bne rxfast                ; yes, then receive fast byte

  373 A:06e1                                    ; receive slow byte

  375 A:06e1                           rxsl1     
  375 A:06e1                                    
  376 A:06e1  ad 50 e8                           lda VIA+VIA_PB
  377 A:06e4  cd 50 e8                           cmp VIA+VIA_PB
  378 A:06e7  d0 f8                              bne rxsl1                ; debounce
  379 A:06e9  0a                                 asl                    ; put DATA into C
  380 A:06ea  30 ee                              bmi rx0                ; wait for CLK high

  382 A:06ec                           rxnxt     
  382 A:06ec                                    
  383 A:06ec  6e 45 05                           ror RXBYT                ; save DATA in received byte

  385 A:06ef                           rxsl2     
  385 A:06ef                                    
  386 A:06ef  ad 50 e8                           lda VIA+VIA_PB
  387 A:06f2  cd 50 e8                           cmp VIA+VIA_PB
  388 A:06f5  d0 f8                              bne rxsl2
  389 A:06f7  0a                                 asl 
  390 A:06f8  10 f5                              bpl rxsl2                ; wait CLK low
  391 A:06fa  ca                                 dex 
  392 A:06fb  f0 1a                              beq rxend

  394 A:06fd                           rxsl3     
  394 A:06fd                                    
  395 A:06fd  ad 50 e8                           lda VIA+VIA_PB
  396 A:0700  cd 50 e8                           cmp VIA+VIA_PB
  397 A:0703  d0 f8                              bne rxsl3
  397 A:0705                                    
  398 A:0705  0a                                 asl 
  399 A:0706  30 f5                              bmi rxsl3
  399 A:0708                                    ; wait CLK high
  400 A:0708  10 e2                              bpl rxnxt                ; always, save next bit

  402 A:070a                                    ; receive fast byte

  404 A:070a                           rxfast    
  404 A:070a                                    
  405 A:070a  ad 5a e8                           lda VIA+VIA_SR
  406 A:070d  49 ff                              eor #$ff
  407 A:070f  8d 45 05                           sta RXBYT
  408 A:0712  a9 c0                              lda #$c0
  409 A:0714  8d 49 05                           sta BURST_FLG                ; Fast Serial Internal/External Flag

  411 A:0717                                    ; end slow/fast receive

  413 A:0717                           rxend     
  413 A:0717                                    
  414 A:0717  68                                 pla 
  415 A:0718  aa                                 tax 
  416 A:0719  20 c0 07                           jsr datalo                ; Set Data Low
  417 A:071c  24 96                              bit STATUS                ; Status word ST
  418 A:071e  50 03                              bvc rxe1
  419 A:0720  20 98 07                           jsr resclkdata                ; reset CLK+DATA
  420 A:0723                           rxe1      
  420 A:0723                                    
  421 A:0723  20 d5 07                           jsr restore                ; Restore Timing
  422 A:0726  ad 45 05                           lda RXBYT
  423 A:0729  49 ff                              eor #$ff
  424 A:072b  18                                 clc 
  425 A:072c  60                                 rts 

  427 A:072d                                    ; -------------------------------------------------
  428 A:072d                                    ; -second-

  430 A:072d                           SECLISTEN 
  431 A:072d  8d 48 05                           sta BYTE
  432 A:0730  20 c6 05                           jsr doseclisten

  434 A:0733                                    ; -------------------------------------------------
  435 A:0733                                    ; Set ATN High

  437 A:0733                           atnhi     
  437 A:0733                                    
  438 A:0733  ad 50 e8                           lda VIA+VIA_PB
  439 A:0736  29 f7                              and #255-P_AOUT
  440 A:0738  8d 50 e8                           sta VIA+VIA_PB
  441 A:073b  60                                 rts 

  443 A:073c                                    ; -------------------------------------------------
  444 A:073c                                    ; -tksa-

  446 A:073c                           SECTALK   
  447 A:073c  8d 48 05                           sta BYTE
  448 A:073f  20 c6 05                           jsr doseclisten
  449 A:0742  24 96                              bit STATUS                ; Status word ST
  450 A:0744  30 4f                              bmi resatn                ; Reset ATN

  452 A:0746  20 d3 07                           jsr stabilize                ; Stabilize Timing
  453 A:0749  20 c0 07                           jsr datalo                ; Set Data Low
  454 A:074c  20 33 07                           jsr atnhi                ; Set ATN High
  455 A:074f  20 a5 07                           jsr clkhi                ; Set Clock High

  457 A:0752                           talk1     
  457 A:0752                                    
  458 A:0752  ad 50 e8                           lda VIA+VIA_PB            ; wait for CLK lo
  459 A:0755  cd 50 e8                           cmp VIA+VIA_PB
  460 A:0758  d0 f8                              bne talk1
  461 A:075a  0a                                 asl 
  462 A:075b  10 f5                              bpl talk1                ; loop on CLK hi
  463 A:075d  4c d5 07                           jmp restore                ; Restore Timing

  465 A:0760                                    ; -ciout-  Print Serial

  467 A:0760                           IECOUT    
  468 A:0760  2c 47 05                           bit BUFFLG                ; is there a byte in the buffer?
  469 A:0763  30 06                              bmi out0                ; if yes, then send it
  470 A:0765  38                                 sec                    ; if not, ...
  471 A:0766  6e 47 05                           ror BUFFLG                ; set flag for byte in buffer
  472 A:0769  d0 05                              bne retbyt                ; (always) store byte and end
  473 A:076b                           out0      
  473 A:076b                                    
  474 A:076b  48                                 pha                    ; save new byte
  475 A:076c  20 d6 05                           jsr bytout                ; Send Data from buffer On Serial Bus
  476 A:076f  68                                 pla 

  478 A:0770                           retbyt    
  478 A:0770                                    
  479 A:0770  8d 48 05                           sta BYTE                ; store new byte into buffer
  480 A:0773  18                                 clc 
  481 A:0774  60                                 rts 

  483 A:0775                                    ; -------------------------------------------------
  484 A:0775                                    ; -untlk-
  485 A:0775                           UNTALK    
  486 A:0775  20 d3 07                           jsr stabilize                ; Stabilize Timing
  487 A:0778  20 ae 07                           jsr clklo                ; Set Clock Low
  488 A:077b  ad 50 e8                           lda VIA+VIA_PB
  489 A:077e  09 08                              ora #P_AOUT               ;$08
  490 A:0780  8d 50 e8                           sta VIA+VIA_PB
  491 A:0783  a9 5f                              lda #$5f
  492 A:0785  2c                                 .byt $2c

  494 A:0786                                    ; -unlsn-
  495 A:0786                           UNLISTEN  
  496 A:0786  a9 3f                              lda #$3f
  497 A:0788  48                                 pha 
  498 A:0789  ad 49 05                           lda BURST_FLG                ; Fast Serial Internal/External Flag
  499 A:078c  29 7f                              and #$7f
  500 A:078e  8d 49 05                           sta BURST_FLG                ; Fast Serial Internal/External Flag
  501 A:0791  68                                 pla 
  502 A:0792  20 84 05                           jsr sendatn

  504 A:0795                                    ; -------------------------------------------------
  505 A:0795                                    ; low level routines

  507 A:0795                                    ; Reset ATN

  509 A:0795                           resatn    
  509 A:0795                                    
  510 A:0795  20 33 07                           jsr atnhi                ; Set ATN High

  512 A:0798                           resclkdata 
  513 A:0798  8a                                 txa 
  514 A:0799  a2 0a                              ldx #$0a

  516 A:079b                           rs1       
  516 A:079b                                    
  517 A:079b  ca                                 dex 
  518 A:079c  d0 fd                              bne rs1
  519 A:079e  aa                                 tax 
  520 A:079f  20 a5 07                           jsr clkhi                ; Set Clock High
  521 A:07a2  4c b7 07                           jmp datahi                ; Set Data High

  523 A:07a5                                    ; Set Clock High

  525 A:07a5                           clkhi     
  525 A:07a5                                    
  526 A:07a5  ad 50 e8                           lda VIA+VIA_PB
  527 A:07a8  29 ef                              and #255-P_COUT         ; $EF
  528 A:07aa  8d 50 e8                           sta VIA+VIA_PB
  529 A:07ad  60                                 rts 

  531 A:07ae                                    ; Set Clock Low

  533 A:07ae                           clklo     
  533 A:07ae                                    
  534 A:07ae  ad 50 e8                           lda VIA+VIA_PB
  535 A:07b1  09 10                              ora #P_COUT               ; $10
  536 A:07b3  8d 50 e8                           sta VIA+VIA_PB
  537 A:07b6  60                                 rts 

  539 A:07b7                                    ; Set Data High

  541 A:07b7                           datahi    
  541 A:07b7                                    
  542 A:07b7  ad 50 e8                           lda VIA+VIA_PB
  543 A:07ba  29 df                              and #255-P_DOUT         ; $DF
  544 A:07bc  8d 50 e8                           sta VIA+VIA_PB
  545 A:07bf  60                                 rts 

  547 A:07c0                                    ; Set Data Low

  549 A:07c0                           datalo    
  549 A:07c0                                    
  550 A:07c0  ad 50 e8                           lda VIA+VIA_PB
  551 A:07c3  09 20                              ora #P_DOUT               ; $20
  552 A:07c5  8d 50 e8                           sta VIA+VIA_PB
  553 A:07c8  60                                 rts 

  555 A:07c9                                    ; Read Serial Lines

  557 A:07c9                                    ; return DATA in C, CLK in N-flag
  558 A:07c9                                     .assert P_DATA=$80,"Bit check mismatch"
  559 A:07c9                                     .assert P_CLK=$40,"Bit check mismatch"
  560 A:07c9                           readiec   
  560 A:07c9                                    
  561 A:07c9  ad 50 e8                           lda VIA+VIA_PB
  562 A:07cc  cd 50 e8                           cmp VIA+VIA_PB
  563 A:07cf  d0 f8                              bne readiec                ; Read Serial Lines
  564 A:07d1  0a                                 asl 
  565 A:07d2  60                                 rts 

  567 A:07d3                                    ; -------------------------------------------------
  568 A:07d3                                    ; Stabilize Timing
  569 A:07d3                                    ; 
  570 A:07d3                                    ; SAVE_FAST stores a copy of the VIC-IIe FAST register
  571 A:07d3                                    ; As unused bits read '1', bit 7 is usually set.
  572 A:07d3                                    ; Except when we clear SAVE_FAST. This is used to 
  573 A:07d3                                    ; indicate if we have previously checked the speed.
  574 A:07d3                                    ;

  576 A:07d3                           stabilize 
  576 A:07d3                                    
  577 A:07d3  78                                 sei 
  578 A:07d4  60                                 rts 
  579 A:07d5                                    ;E573: SEI
  580 A:07d5                                    ;
  581 A:07d5                                    ;E574: BIT $0A3A ; flag $0a3a.7 set?
  582 A:07d5                                    ;E577: BMI stabend ; yes, then end
  583 A:07d5                                    ;E579: BIT SAVE_FAST ; have we checked speed before?
  584 A:07d5                                    ;E57C: BMI stabend ; yes, then end
  585 A:07d5                                    ;
  586 A:07d5                                    ;E57E: LDA VIC+VIC_FAST ; VIC-IIe FAST; bit 0 set is 2MHz
  587 A:07d5                                    ;E581: STA SAVE_FAST ; save value (sets bit 7 - unused bits read 1)
  588 A:07d5                                    ;E584: LDA VIC+VIC_SPRT ; Sprite enable register
  589 A:07d5                                    ;E587: STA SAVE_SPRT ; save value
  590 A:07d5                                    ;
  591 A:07d5                                    ;E58A: LDA #$00 
  592 A:07d5                                    ;E58C: STA VIC+VIC_SPRT ; disable all sprites
  593 A:07d5                                    ;E58F: STA VIC+VIC_FAST ; go to slow mode
  594 A:07d5                                    ;
  595 A:07d5                                    ;E592: LDA SAVE_SPRT ; have any sprites been enabled?
  596 A:07d5                                    ;E595: BEQ stabend ; no, then end
  597 A:07d5                                    ;E597: TXA  ; otherwise delay at least one rasterline
  598 A:07d5                                    ;E598: LDX #$00
  599 A:07d5                                    ;
  600 A:07d5                                    ;stab0:
  601 A:07d5                                    ;E59A: DEX
  602 A:07d5                                    ;E59B: BNE stab0
  603 A:07d5                                    ;E59D: TAX
  604 A:07d5                                    ;
  605 A:07d5                                    ;stabend:
  606 A:07d5                                    ;E59E: RTS
  607 A:07d5                                    ;
  608 A:07d5                                    ; Restore Timing

  610 A:07d5                           restore   
  610 A:07d5                                    
  611 A:07d5  58                                 cli 
  612 A:07d6  60                                 rts 
  613 A:07d7                                    ;E59F: BIT $0A3A ; flag $0a3a.7 is set?
  614 A:07d7                                    ;E5A2: BMI restend ; yes then end
  615 A:07d7                                    ;E5A4: BIT SAVE_FAST ; timing changed (from Stabilize timing above)?
  616 A:07d7                                    ;E5A7: BPL restend ; no then end
  617 A:07d7                                    ;
  618 A:07d7                                    ;E5A9: LDA SAVE_SPRT
  619 A:07d7                                    ;E5AC: STA VIC+VIC_SPRT
  620 A:07d7                                    ;E5AF: LDA SAVE_FAST
  621 A:07d7                                    ;E5B2: STA VIC+VIC_FAST
  622 A:07d7                                    ;E5B5: LDA #$00 ; store zero in FAST store byte
  623 A:07d7                                    ;E5B7: STA SAVE_FAST ; make sure next time we check timing
  624 A:07d7                                    ;
  625 A:07d7                                    ;restend:
  626 A:07d7                                    ;E5BA: CLI
  627 A:07d7                                    ;E5BB: RTS

  629 A:07d7                                    ; -------------------------------------------------
  630 A:07d7                                    ; Prepare For Response

  632 A:07d7                           prep4res  
  632 A:07d7                                    
  633 A:07d7  ad 5d e8                           lda VIA+VIA_IFR
  634 A:07da  29 04                              and #VIA_IRQ_SR               ; wait for SDR full interrupt source
  635 A:07dc  f0 f9                              beq prep4res                ; Prepare For Response
  636 A:07de  8d 5d e8                           sta VIA+VIA_IFR

  638 A:07e1                                    ; Fast Disk Off

  640 A:07e1                           fastoff   
  640 A:07e1                                    
  641 A:07e1  a9 0c                              lda #%00001100             ; shift in under ext clock
  642 A:07e3  8d 5b e8                           sta VIA+VIA_ACR

  644 A:07e6  ad 50 e8                           lda VIA+VIA_PB            ; enable fast serial _input_
  645 A:07e9  09 01                              ora #P_FSDIR
  646 A:07eb  8d 50 e8                           sta VIA+VIA_PB
  647 A:07ee  60                                 rts 

  649 A:07ef                                    ; Fast Disk On

  651 A:07ef                           faston    
  651 A:07ef                                    
  652 A:07ef  ad 50 e8                           lda VIA+VIA_PB            ; enable fast serial _output_
  653 A:07f2  29 fe                              and #255-P_FSDIR
  654 A:07f4  8d 50 e8                           sta VIA+VIA_PB

  656 A:07f7                                    ;lda VIA+VIA_SR  ; dummy read
  657 A:07f7  a9 14                              lda #%00010100             ; shift out under T2 control
  658 A:07f9  8d 5b e8                           sta VIA+VIA_ACR
  659 A:07fc                                    ;LDA #VIA_IRQ_SR
  660 A:07fc                                    ;STA VIA+VIA_IFR  ; clear SR interrupts
  661 A:07fc  a9 00                              lda #>T2VAL
  662 A:07fe  8d 59 e8                           sta VIA+VIA_T2H            ; restart the timer
  663 A:0801                                    ;lda VIA+VIA_SR
  664 A:0801  60                                 rts 

  667 A:0802                           SETST     
  667 A:0802                                    
  668 A:0802  05 96                              ora STATUS
  669 A:0804  85 96                              sta STATUS
  670 A:0806  60                                 rts 

  672 A:0807                                    ; -------------------------------------------------
  673 A:0807                                    ; -------------------------------------------------
