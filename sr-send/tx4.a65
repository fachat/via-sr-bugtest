

; ----- Serial I/O 6522 -----
PB             = VIA+0
PA             = VIA+1
DDRB           = VIA+2
DDRA           = VIA+3
T1LC           = VIA+4
T1HC           = VIA+5
T1LL           = VIA+6
T1HL           = VIA+7
T2L            = VIA+8
T2H            = VIA+9
SR             = VIA+10
ACR            = VIA+11
PCR            = VIA+12
IFR            = VIA+13
IER            = VIA+14
PA_NOHS        = VIA+15


        .word $0401
        *=$0401

        .word eol               ; BASIC link pointer
        .word 10                ; line number
        .byt $9e, "1040", 0     ; BASIC code (tokenized)
eol     .word 0                 ; BASIC link pointer, 0 means end of code
        .dsb 1040-*

	;---------------------------------
	; test when SR starts 
	; 
	; in this setup, 
	; 1. T2 is set to 100 
	; 2. a dummy value is written to SR
	; 3. SR is started when writing to ACR
	; 4. a real value is written to SR
	;
	; The main condition is that T2 underflows after
	; we set SR to output via T2, buf before we store
	; a new value in SR
	; 
	; note: Phi2 ~ 0.95us
	; 
	; scope:
	; T=0		: CB1 goes high
	; T=40us	: ATN goes low
	; T=46us	; CB1 goes low (~49 phi2 cycles)
	; T=57us	; CB1 goes low for first shift clock
	; dT=90us/bit	; shift out BOGUS value (%01010101)
	;	i.e. 6us = N+2 / half-bit
	;
	; reading T2 after writing to SR gives this pattern:
	; T2L seems to count from 45...0, 45...0, 
	; while the T2H actually counts down from $ff with every T2L underflow.
	; 
	; result:
	; when T2 is running, IFR.SR is not set(*), shifting
	; will start at next underflow of T2L.
	; As we have written a bogus value to SR _before_ switching to output,
	; the bit counter is set and shifting out starts at the first underflow
	; anyway, even without setting a new value.
	; setting a new value while shifting, mangles the value sent out, replacing
	; the yet-unshifted bits with the highes bits of the new values written to it.
	; 
	; (*) Rockwell datasheet says if IFR.SR is set, shifting starts immediately,
	; which remains to be tested
	; 
	; note: we set CB2 high output in PCR. However, as opposed to the MOS datasheet
	; the W6522 keeps the last data bit on CB2 and does not return to CB2 high output
	; (which conforms to the Rockwell datasheet)

T2VAL	=45

start	
	;---------------------------------
	; init state

	; set port line (PB0) to output on IEC/SERIAL board
	; set ATN, DATA, CLK high (PB3)
#if VIA = $e850
	lda PB
	and #255-1-8-16-32
	sta PB
	lda DDRB
	ora #1+8+16+32
	sta DDRB
#endif
	; clear all interrupt enable and flag bits
	lda #%01111111
	sta IER
	sta IFR

	; set CB2 high output
	lda #%00001110
	sta PCR			; CB1 going high with write here, T=0

; numeric labels are time since T=0 in clock cycles, i.e. ~0.95us

	; ACR.5 = 0 -> T2 one-shot mode
1:	lda #%00000000
3:	sta ACR

7:	lda #<T2VAL
9:	sta T2L
13:	lda #>T2VAL
15:	sta T2H

	; ACR.5 = 0 -> T2 one-shot mode
	; ACR.4-2 = 011 -> shift IN under external
19:	lda #%00001100
21:	sta ACR	

25:	lda #%00001111
27:	sta SR	; dummy write

31:	lda T2L
35:	sta $8000	; debug output

#if VIA = $e850
	; start timing, trigger for scope
39:	lda PB
43:	ora #8		; ATN low 
45:	sta PB
#endif
	; ACR.4-2 = 101 -> shift OUT under T2
49:	lda #%00010100	
51:	sta ACR

	; check if SR shift already starts here
55:	nop
57:	nop
59:	nop
61:	nop
63:	nop
65:	nop
67:	nop
69:	nop

	; write new data to shift register

71:	lda #%10101010
73:	sta SR

	;---------------------------------
	; read timer value and poke to screen
77:	ldy #40
l	lda T2L
	sta $8000,y
	iny
	lda T2H
	sta $8000,y
	iny
	bne l

	;---------------------------------
	; cleanup

#if VIA = $e850
	lda PB
	and #255-1-8
	sta PB
#endif
	brk
	



