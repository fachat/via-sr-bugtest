

; ----- Serial I/O 6522 -----
PB             = VIA+0
PA             = VIA+1
DDRB           = VIA+2
DDRA           = VIA+3
T1LC           = VIA+4
T1HC           = VIA+5
T1LL           = VIA+6
T1HL           = VIA+7
T2L            = VIA+8
T2H            = VIA+9
SR             = VIA+10
ACR            = VIA+11
PCR            = VIA+12
IFR            = VIA+13
IER            = VIA+14
PA_NOHS        = VIA+15


        .word $0401
        *=$0401

        .word eol               ; BASIC link pointer
        .word 10                ; line number
        .byt $9e, "1040", 0     ; BASIC code (tokenized)
eol     .word 0                 ; BASIC link pointer, 0 means end of code
        .dsb 1040-*

	;---------------------------------
	; test when SR starts 
	; 
	; in this setup, 
	; 1. T2 is set to 4 which is very short
	; 2. a dummy value is written to SR
	; 3. SR is started when writing to ACR
	; 4. a real value is written to SR
	;
	; The main condition is that T2 underflows before
	; we set SR to output via T2
	; 
	; scope:
	; T=0		: CB1 goes high
	; T=40us	: ATN goes low
	; T=46us	; CB1 goes low
	; T=261us	; CB1 goes low for first shift clock
	; dT=12us/bit	; shift out second value (%10101010)
	;	i.e. 6us = N+2 / half-bit
	;
	; reading T2L after writing to SR gives an interesting pattern:
	; 1st it counts down from an $ffxx value to $ff16 (observed, might be $ff00)
	; after that it T2L seems to count from 4...0, 4...0, 4...0, ...
	; while the T2H actually counts down from $ff with every T2L underflow.
	; 
	; result:
	; when T2 is running, IFR.SR is not set(*), shifting
	; will start at next underflow of T2L (!).
	; This means in bad timing conditions, this may introduce a delay of 256 bytes
	; as can be seen on the scope
	; 
	; (*) Rockwell datasheet says if IFR.SR is set, shifting starts immediately,
	; which remains to be tested

T2VAL	=4

start	
	;---------------------------------
	; init state

	; set port line (PB0) to output on IEC/SERIAL board
	; set ATN high (PB3)
#if VIA = $e850
	lda PB
	and #255-1-8
	sta PB
	lda DDRB
	ora #1+8
	sta DDRB
#endif
	; clear all interrupt enable and flag bits
	lda #%01111111
	sta IER
	sta IFR

	lda #%00000000
	sta PCR

	; ACR.5 = 0 -> T2 one-shot mode
	lda #%00000000
	sta ACR

	lda #<T2VAL
	sta T2L
	lda #>T2VAL
	sta T2H

	; ACR.5 = 0 -> T2 one-shot mode
	; ACR.4-2 = 011 -> shift IN under external
	lda #%00001100
	sta ACR		

	lda #%11110000
	sta SR	; dummy write

	lda T2L
	sta $8000	; debug output

#if VIA = $e850
	; start timing, trigger for scope
	lda PB
	ora #8		; ATN low 
	sta PB
#endif
	; ACR.4-2 = 101 -> shift OUT under T2
	lda #%00010100	
	sta ACR

	; check if SR shift already starts here
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

	; write new data to shift register

	lda #%10101010
	sta SR

	;---------------------------------
	; read timer value and poke to screen
	ldy #40
l	lda T2L
	sta $8000,y
	iny
	lda T2H
	sta $8000,y
	iny
	bne l

	;---------------------------------
	; cleanup

#if VIA = $e850
	lda PB
	and #255-1-8
	sta PB
#endif
	brk
	



